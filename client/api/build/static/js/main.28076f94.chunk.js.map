{"version":3,"sources":["resources/userlocation_icon.svg","resources/waymessage_icon.svg","api.js","stores/userstore.js","InputField.js","SubmitButton.js","LoginForm.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","API_URL_WAYMESSAGES_DB","window","location","hostname","extendObservable","this","loading","isLoggedIn","username","InputField","className","props","type","placeholder","value","onChange","e","target","React","Component","SubmitButton","disabled","onClick","text","LoginForm","state","password","email","buttonDisabled","property","val","trim","length","setState","LOGIN_API_URL","fetch","method","headers","body","JSON","stringify","res","json","result","success","UserStore","resetForm","alert","msg","console","log","setStateFromInputValue","doLogin","waymessage_schema","L","icon","iconUrl","userLocationIconUrl","iconSize","popupAnchor","shadowUrl","shadowSize","shadowAnchor","waymessageIconUrl","Joi","object","string","regex","required","message","min","max","WAYMESSAGE_API_URL","LOGOUT_API_URL","ISLOGGEDIN_API_URL","App","userPosition","lat","lng","hasUserPosition","markerPosition","activeMarker","zoom","userWayMessage","name","showWayMessageForm","sendingWayMessage","sentWayMessage","waymessages","mapOnClick","event","prevState","latlng","waymessageValueChanged","waymessageFormIsValid","userMessage","validate","error","waymessageFormSubmit","preventDefault","latitude","longitude","then","setTimeout","haveSeenLocation","reduce","all","waymessage","key","toFixed","otherWayMessages","push","Promise","resolve","navigator","geolocation","getCurrentPosition","coords","doLogout","observer","Boolean","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.28076f94.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/userlocation_icon.48db4103.svg\";","module.exports = __webpack_public_path__ + \"static/media/waymessage_icon.a445d694.svg\";","const API_URL_WAYMESSAGES_DB = window.location.hostname === \"localhost\" ? \"http://localhost:1337/api/waymessages\" : \"production-url-here\";\r\n\r\nexport function fetchWayMessages() {\r\n    // Get user's location, load waymessages from db into user's state\r\n    // only get messages within certain lng/lat of user?\r\n    return fetch(API_URL_WAYMESSAGES_DB)\r\n      .then(res => res.json())\r\n      .then(waymessages => {\r\n        // Every message will be taken from db, put into an array at the index of their\r\n        // lat + lng. \r\n        // When messages are displayed, we display one popup for every lat+lng key,\r\n        // and all the different messages at that same lat+lng key are put into the same object.\r\n        const haveSeenLocation = {};\r\n        return waymessages = waymessages.reduce((all, waymessage) => {\r\n          const key = `${waymessage.latitude.toFixed(3 )}${waymessage.longitude.toFixed(3)}`;\r\n          if (haveSeenLocation[key]) {\r\n            // Waymessage object already exists at this key (lat+lng), append to the object\r\n            haveSeenLocation[key].otherWayMessages = haveSeenLocation[key].otherWayMessages || [];\r\n            haveSeenLocation[key].otherWayMessages.push(waymessage);\r\n          } else {\r\n            // No waymessage already exists at this key (lat+lng), create first object\r\n            haveSeenLocation[key] = waymessage; \r\n            all.push(waymessage);\r\n          }\r\n          return all;\r\n        }, []);\r\n      });\r\n}\r\n\r\nexport function getUserLocation() {\r\n    return new Promise((resolve) => {\r\n        navigator.geolocation.getCurrentPosition((userPosition) => {\r\n        // setState refreshes the react app when called\r\n        resolve({\r\n            lat: userPosition.coords.latitude,\r\n            lng: userPosition.coords.longitude,\r\n        });\r\n        console.log(\"User location received... positioning map. \" + userPosition.coords.latitude + \", \" + userPosition.coords.latitude);\r\n      }, () => {\r\n        console.log(\"User location request denied... locating general location from ip adress.\")\r\n        fetch(\"https://ipapi.co/json\")\r\n          .then(res => res.json())\r\n          .then(userPosition => {\r\n            //console.log(userPosition);\r\n            resolve({\r\n                lat: userPosition.latitude,\r\n                lng: userPosition.longitude,\r\n            });\r\n          });\r\n      });\r\n    });\r\n}","import { extendObservable } from 'mobx';\r\n\r\nclass UserStore {\r\n    constructor() {\r\n        extendObservable(this, {\r\n            loading: true,\r\n            isLoggedIn: false,\r\n            username: '',\r\n        });\r\n    }\r\n}\r\n\r\nexport default new UserStore();","import React from 'react';\r\n\r\nclass InputField extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"input-field\">\r\n                <input\r\n                    className={this.props.className || 'input'}\r\n                    type={this.props.type}\r\n                    placeholder={this.props.placeholder}\r\n                    value={this.props.value}\r\n                    onChange={ (e) => this.props.onChange(e.target.value) } // pass new target value (the input box is the target) to the change function when called\r\n                /> \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default InputField;","import React from 'react';\r\n\r\nclass SubmitButton extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"submit-button\">\r\n                <button\r\n                    className={this.props.className || \"btn\"}\r\n                    disabled={this.props.disabled}\r\n                    onClick={ () => this.props.onClick() }\r\n                >\r\n                    {this.props.text}\r\n                </button>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SubmitButton;","import React from 'react';\r\nimport InputField from './InputField'\r\nimport SubmitButton from './SubmitButton'\r\nimport UserStore from './stores/userstore'\r\n\r\nclass LoginForm extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            \r\n            username: '',\r\n            password: '',\r\n            email: '',\r\n\r\n            // disable button when login request is loading\r\n            buttonDisabled: false,\r\n        }\r\n    }\r\n\r\n    // NO NEED TO VALIDATE USING SCHEMA FOR JUST USER LOGIN INPUT, DO ON SIGNUP.\r\n\r\n    // userLoginFormIsValid(userNameField, passwordField, emailField) {\r\n    //     // Validate user login input info with joi schema\r\n    //     // DO: VALIDATE SIGNUP INFO ASWELL.\r\n\r\n    //     var userInputInfo = {\r\n    //         i_username: userNameField.value,\r\n    //         i_password: passwordField.value,\r\n    //         i_email: emailField.value\r\n    //     };\r\n\r\n    //     var result = user_login_schema.validate(userInputInfo);\r\n    //     return result.error ? false : userInputInfo;\r\n    // }\r\n\r\n    // setStateUserInfo() {\r\n    //     var userInputInfo = this.userLoginFormIsValid();\r\n    //     if (userInputInfo) {\r\n    //         // User successfully logged in with valid info\r\n    //         this.setState({\r\n    //             userInfo: userInputInfo\r\n    //         });\r\n    //         this.doLogin();\r\n    //     } else {\r\n    //         // User's data was invalid to the schema, login failed\r\n    //         this.resetForm();\r\n    //     }\r\n    // }\r\n\r\n    setStateFromInputValue(property, val) {\r\n        val = val.trim();\r\n        if (val.length > 30) {\r\n            return;\r\n        }\r\n        this.setState({\r\n            [property]: val\r\n        })\r\n    }\r\n\r\n    resetForm() {\r\n        this.setState({\r\n\r\n            username: '',\r\n            password: '',\r\n            email: '',\r\n\r\n            buttonDisabled: false,\r\n        })\r\n    }\r\n\r\n    async doLogin() {\r\n        const LOGIN_API_URL = window.location.hostname === \"localhost\" ? \"http://localhost:1337/api/users/login\" : \"production-url-here\";\r\n\r\n        if (!this.state.username || !this.state.password) {\r\n            return;\r\n        }\r\n\r\n        this.setState({\r\n            buttonDisabled: true,\r\n        });\r\n\r\n        try {\r\n            // make a request to the backend /login to try to login.\r\n            let res = await fetch(LOGIN_API_URL, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    username: this.state.username,\r\n                    email: this.state.email,\r\n                    password: this.state.password,\r\n                })\r\n            });\r\n            \r\n            // backend will respond success if the user matches any, not if no user.\r\n            let result = await res.json();\r\n            if (result && result.success) {\r\n                UserStore.isLoggedIn = true;\r\n                UserStore.username = result.username;\r\n            } else if (result && result.success === false) {\r\n                // User tried to log in, no account match found, login failed.\r\n                this.resetForm();\r\n                alert(result.msg); // change alert\r\n            }\r\n        }\r\n        catch(e) {\r\n            // error requesting to api\r\n            console.log(e);\r\n            this.resetForm();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"login-form\">\r\n                Log in.\r\n                <InputField\r\n                    type='text'\r\n                    placeholder='username'\r\n                    value={this.state.username ? this.state.username : ''}\r\n                    onChange={ (val) => this.setStateFromInputValue('username', val) }\r\n                />\r\n                {/* <InputField\r\n                    type='email'\r\n                    placeholder='email'\r\n                    value={this.state.email ? this.state.email : ''}\r\n                    onChange={ (val) => this.setStateFromInputValue('email', val) }\r\n                /> */}\r\n                <InputField\r\n                    type='text'\r\n                    placeholder='password'  \r\n                    value={this.state.password ? this.state.password : ''}\r\n                    onChange={ (val) => this.setStateFromInputValue('password', val) }\r\n                />\r\n                <SubmitButton\r\n                    text='Login'\r\n                    disabled={this.state.buttonDisabled}\r\n                    onClick={ () => this.doLogin() }\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LoginForm;\r\n","import React, { Component } from 'react';\nimport { observer } from 'mobx-react';\n\nimport L from \"leaflet\";\nimport { Map, TileLayer, Marker, Popup } from \"react-leaflet\"\nimport { Card, Button, CardTitle, CardText, Row, Col, Form, FormGroup, Label, Input, ButtonDropdown } from \"reactstrap\";\n\nimport userLocationIconUrl from \"./resources/userlocation_icon.svg\"\nimport waymessageIconUrl from \"./resources/waymessage_icon.svg\"\n\nimport './App.css';\nimport { render } from 'react-dom';\n\n// Dependencies\nimport Joi from \"joi\";\n\n// backend api functions\nimport * as api from './api';\n\n// Map Component\nimport MapComponent from './MapComponent';\n\n// User login\nimport UserStore from './stores/userstore';\nimport LoginForm from './LoginForm';\nimport SubmitButton from './SubmitButton';\n\n// made by Aina, ID thenounproject.com\nconst userLocationIcon = L.icon({\n  iconUrl: userLocationIconUrl,\n  iconSize: [50, 82],\n  popupAnchor: [0, -72],\n  shadowUrl: 'my-icon-shadow.png',\n  shadowSize: [68, 95],\n  shadowAnchor: [22, 94]\n});\n\n// made by \nconst waymessageIcon = L.icon({\n  iconUrl: waymessageIconUrl,\n  iconSize: [50, 82],\n  popupAnchor: [0, -32],\n  shadowUrl: 'my-icon-shadow.png',\n  shadowSize: [68, 95],\n  shadowAnchor: [22, 94]\n});\n\nconst waymessage_schema = Joi.object({\n  // waymessage schema for client-side frontend as well as backend db insertion\n  // only validates username + message instead, lat/lng comes from map, no need\n\n  username: Joi.string()\n    .regex(/^[a-zA-ZÀ-ÿ0-9-_]{1,30}$/)\n    .required(),\n\n  message: Joi.string()\n    .min(1)\n    .max(300)\n    .required(),\n})\n\nconst WAYMESSAGE_API_URL = window.location.hostname === \"localhost\" ? \"http://localhost:1337/api/waymessages\" : \"production-url-here\";\nconst LOGOUT_API_URL = window.location.hostname === \"localhost\" ? \"http://localhost:1337/api/users/logout\" : \"production-url-here\";\nconst ISLOGGEDIN_API_URL = window.location.hostname === \"localhost\" ? \"http://localhost:1337/api/users/isLoggedIn\" : \"production-url-here\";\n\nclass App extends Component {\n  // every component has a state object, can be set with setState()\n  state = {\n    userPosition: {\n      lat: 51.505,\n      lng: -0.09,\n    },\n    hasUserPosition: false,\n\n    markerPosition: {\n      lat: 0,\n      lng: 0,\n    },\n    activeMarker: false,\n\n    zoom: 2,\n\n    userWayMessage: {\n      name: \"\",\n      message: \"\"\n    },\n\n    showWayMessageForm: false,\n    sendingWayMessage: false,\n    sentWayMessage: false,\n\n    waymessages: []\n  }\n\n  componentDidMount() {\n\n    // Check if user is logged in on application load\n    try {\n      // fetch isLoggedIn api\n\n      let res = fetch(ISLOGGEDIN_API_URL, {\n        method: 'POST',\n        headers: {\n          'Accept': 'application.json',\n          'Content-Type': 'application/json',\n        }\n      });\n\n      let result = res.json();\n      if (result && result.success) {\n        // user is logged in\n        UserStore.loading = false;\n        UserStore.isLoggedIn = true;\n        UserStore.username = result.username;\n      } else { \n        // user isn't logged in on the page\n        UserStore.loading = false;\n        UserStore.isLoggedIn = false;\n        UserStore.username = '';\n      }\n    } \n    catch(e) {\n      UserStore.loading = false;\n      UserStore.isLoggedIn = false;\n    }\n\n    // Fetch all waymessages from backend db\n    api.fetchWayMessages()\n      .then(waymessages => {\n        this.setState({\n          waymessages\n        })\n      })\n\n    // Grab user's location with geolocator/ip api.\n    api.getUserLocation()\n      .then(userPosition => {\n        this.setState({\n          userPosition,\n          hasUserPosition: true,\n          zoom: 13,\n        });\n      })\n  }\n\n  doLogout() {\n    // Check if user is logged in on application load\n    try {\n      // fetch logout api\n      let res = fetch(LOGOUT_API_URL, {\n        method: 'post',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n        }\n      });\n\n      let result = res.json();\n      if (result && result.success) {\n        UserStore.isLoggedIn = false;\n        UserStore.username = '';\n      }\n    }\n    catch(e) {\n      console.log(e);\n    }\n  }\n\n  // DOESNT WORK, LATLNG DOESNT UPDATE.\n  mapOnClick = (event) => {\n    console.log(event);\n    this.setState((prevState) => ({\n      markerPosition: {\n        ...prevState.markerPosition,\n        lat: event.latlng.lat,\n        lng: event.latlng.lng\n      }\n    }))\n    console.log(this.state.markerPosition);\n  }\n  \n  // Callback whenever user waymessage form values change.\n  waymessageValueChanged = (event) => {\n    const { name, value } = event.target;\n    this.setState((prevState) => ({\n      userWayMessage: {\n        ...prevState.userWayMessage, // keep same previous object\n        [name]: value // update a single property (name)\n      }\n    }))\n  }\n\n  waymessageFormIsValid = () => {\n    const userMessage = {\n      username: this.state.userWayMessage.name,\n      message: this.state.userWayMessage.message,\n    };\n    const result = waymessage_schema.validate(userMessage)\n\n    return !result.error ? true : false\n  }\n\n  // Onclick \"Send\" method user waymessage form.\n  waymessageFormSubmit = (event) => {\n    event.preventDefault();\n\n    if (this.waymessageFormIsValid()) {\n      // Request backend API to insert user WayMessage into database.\n      this.setState({\n        sendingWayMessage: true,\n      });\n\n      fetch(WAYMESSAGE_API_URL, {\n        method: \"POST\",\n        headers: {\n          'Accept': \"application/json\",\n          'Content-Type': \"application/json\",\n        },\n        body: JSON.stringify({\n          username: this.state.userWayMessage.name,\n          message: this.state.userWayMessage.message,\n          latitude: this.state.userPosition.lat,\n          longitude: this.state.userPosition.lng,\n        })\n      }).then(res => res.json())\n      .then(message => {\n        console.log(message);\n        setTimeout(() => {\n          this.setState({\n            sendingWayMessage: false,\n            sentWayMessage: true,\n          });\n        }, 0);\n      });\n\n    }\n  }\n\n  render() {\n\n    /**\n     * User Auth \n     */\n    if (UserStore.loading) {\n      // If user is loading to login, display loading screen.\n      return (\n        <div className=\"app\">\n          <div className=\"container\">\n            Loading, please wait...\n          </div>\n        </div>\n      );\n    } else {\n      // User has finished loading in, check if logged in or not, display correct app screen.\n      if (UserStore.isLoggedIn) {\n        return (\n          <div className=\"app\">\n            <div className=\"container\">\n              Welcome {UserStore.username}\n\n              <SubmitButton\n                text={ 'Logout' }\n                disabled={ false }\n                onClick={ () => this.doLogout() }\n              />\n            </div>\n          </div>\n        );\n      }\n\n      // User is not logged in, display landing page\n      return (\n        <div className=\"app\">\n            <div className=\"container\">\n              <LoginForm />\n            </div>\n          </div>\n      );\n\n    }\n\n    // Map -> Put into separate MapComponent\n    const userPosition = [this.state.userPosition.lat, this.state.userPosition.lng]\n    const markerPostion = [this.state.markerPosition.lat, this.state.markerPosition.lng]\n    return (\n      <div className = \"map\">\n        <Map className=\"map\" center={userPosition} zoom={this.state.zoom}>\n          <TileLayer\n            attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors: Location Icon by Aina, ID thenounproject.com'\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          />\n\n          // User's position marker\n          { this.state.hasUserPosition ? \n            <Marker\n              position={userPosition} \n              icon={userLocationIcon}>\n            </Marker> : ''\n          }\n\n          // User placed marker for destination location\n          { this.state.activeMarker ? \n            <Marker\n              position={this.state.markerPosition} \n              icon={userLocationIcon}>\n              <Popup>\n                Marker position. <br /> Working.\n              </Popup>\n            </Marker> : ''\n          }\n          \n          // Loop over all waymessage markers to load into user's map\n          {this.state.waymessages.map(waymessage => (\n            <Marker\n              key={waymessage._id}\n              position={[waymessage.latitude, waymessage.longitude]} \n              icon={waymessageIcon}>\n              <Popup>\n                <p><em>{waymessage.username}:</em> {waymessage.message}</p>\n\n                { waymessage.otherWayMessages ? waymessage.otherWayMessages.map(waymessage => \n                    <p key={waymessage._id}><em>{waymessage.username}:</em> {waymessage.message}</p>\n                  ) : \n                    ''\n                }\n\n              </Popup>\n            </Marker>\n          ))}\n        </Map>\n\n        <Card body className = \"home-dock\">\n          <section>\n            <CardText>Enter a location to find the best route.</CardText>\n          </section>\n          <section>\n            <CardText>Post a Waymessage</CardText>\n            <Button type=\"submit\" className=\"home-dock-button\" onClick={() => {\n              this.setState({\n                showWayMessageForm: true,\n              })\n            }}>\n            Post a Waymessage</Button>\n          </section>\n        </Card>\n        \n        { this.state.showWayMessageForm && !this.state.sendingWayMessage && !this.state.sentWayMessage ?\n          <Card body className = \"waymessage-form\">\n            <CardTitle>Post a Waymessage</CardTitle>\n            <Form onSubmit={this.waymessageFormSubmit}>\n              <FormGroup> \n                <Input \n                  onChange={this.waymessageValueChanged}\n                  type=\"text\" \n                  style={{width: 75 + '%'}}  \n                  name=\"name\" \n                  id=\"name\" \n                  placeholder=\"Enter your name.\" \n                />\n              </FormGroup>\n              <FormGroup>\n                <Input \n                  onChange={this.waymessageValueChanged}\n                  type=\"textarea\" \n                  style={{maxHeight: 70 + 'px', minHeight: 40 + 'px'}} \n                  name=\"message\" \n                  id=\"message\" \n                  placeholder=\"Enter a message.\" \n                />\n              </FormGroup>\n              <Button type=\"submit\" className=\"waymessage-form-button\" disabled={!this.waymessageFormIsValid()}>Send</Button>\n            </Form>\n          </Card> \n          : \n          this.sendingWayMessage ?\n            <img src=\"https://i.giphy.com/media/BCIRKxED2Y2JO/200w_d.gif\"/> \n            :\n            <CardText>Waymessage has been posted.</CardText>\n        }\n      </div>\n    )\n  }\n  \n}\n\nexport default observer(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","/*\n\n  index.js acts as main entry way into the react app,\n  use to import main dependencies and libraries\n\n*/\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport \"leaflet/dist/leaflet.css\"\nimport \"bootstrap/dist/css/bootstrap.css\"\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}